// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_T_ZL_PERSONS_H_
#define FLATBUFFERS_GENERATED_T_ZL_PERSONS_H_

#include "flatbuffers/flatbuffers.h"

namespace zl {
namespace persons {

struct Score;
struct StuScore;

struct Score : private flatbuffers::Table {
  const flatbuffers::Vector<float> *scores() const { return GetPointer<const flatbuffers::Vector<float> *>(4); }
  bool Verify(const flatbuffers::Verifier &verifier) const {
    return VerifyTable(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* scores */) &&
           verifier.Verify(scores());
  }
};

struct ScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_scores(flatbuffers::Offset<flatbuffers::Vector<float>> scores) { fbb_.AddOffset(4, scores); }
  ScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ScoreBuilder &operator=(const ScoreBuilder &);
  flatbuffers::Offset<Score> Finish() { return flatbuffers::Offset<Score>(fbb_.EndTable(start_, 1)); }
};

inline flatbuffers::Offset<Score> CreateScore(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<float>> scores = 0) {
  ScoreBuilder builder_(_fbb);
  builder_.add_scores(scores);
  return builder_.Finish();
}

struct StuScore : private flatbuffers::Table {
  const flatbuffers::Vector<int32_t> *ids() const { return GetPointer<const flatbuffers::Vector<int32_t> *>(4); }
  bool Verify(const flatbuffers::Verifier &verifier) const {
    return VerifyTable(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* ids */) &&
           verifier.Verify(ids());
  }
};

struct StuScoreBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ids(flatbuffers::Offset<flatbuffers::Vector<int32_t>> ids) { fbb_.AddOffset(4, ids); }
  StuScoreBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StuScoreBuilder &operator=(const StuScoreBuilder &);
  flatbuffers::Offset<StuScore> Finish() { return flatbuffers::Offset<StuScore>(fbb_.EndTable(start_, 1)); }
};

inline flatbuffers::Offset<StuScore> CreateStuScore(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int32_t>> ids = 0) {
  StuScoreBuilder builder_(_fbb);
  builder_.add_ids(ids);
  return builder_.Finish();
}

inline const StuScore *GetStuScore(const void *buf) { return flatbuffers::GetRoot<StuScore>(buf); }

inline bool VerifyStuScoreBuffer(const flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<StuScore>(); }

};  // namespace zl
};  // namespace persons

#endif  // FLATBUFFERS_GENERATED_T_ZL_PERSONS_H_
