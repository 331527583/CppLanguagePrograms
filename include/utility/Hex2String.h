#ifndef ZL_HEX2STRING_H
#define ZL_HEX2STRING_H
#include <string>

// 十六进制的字符和数字对应表
const static char g_hexNum[128] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F 
};

const static char g_hexStr[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F','\0'};

/// 16进制的字符串解码成正常显示的字符串
inline std::string decodeHexString(const std::string &hexstr)
{
    std::string buf;
    int index = 0;
    while (hexstr[index] != '\0')
    {
        buf += static_cast<char>(g_hexNum[hexstr[index]] * 16 + g_hexNum[hexstr[index+1]]);
        index += 2;
    }
    return buf;
}

/// 字符串编码成16进制显示的字符串
inline std::string encodeToHexString(const std::string &str)
{
    std::string hexbuf;
    int index = 0;
    while (str[index] != '\0')
    {
        hexbuf += g_hexStr[static_cast<unsigned char>(str[index]) / 16];
        hexbuf += g_hexStr[static_cast<unsigned char>(str[index]) % 16];
        ++index;
    }
    return hexbuf;
}

#endif  /* ZL_HEX2STRING_H */